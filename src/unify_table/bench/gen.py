from pathlib import Path

DATA_PATH = Path("./data")

TEMPLATE = """
// This file is generated by the benchmark generator.
pub fn data() -> Array[((Int, Int, Int), Array[(Int, Int)], Array[Int])] {{
    [{data}]
}}

pub fn answers() -> Array[Array[Int]] {{
    [{answers}]
}}
"""


def input_reader(path: Path) -> tuple[tuple[int, int, int], list[list[int]], list[int]]:
    """
    Generate the data for the benchmark
    """
    print(f"Reading input from {path}")
    with open(path, "r", encoding="utf-8") as f:
        n, m = map(int, f.readline().split())
        edges = [list(map(int, f.readline().split())) for _ in range(m)]
        k = int(f.readline().strip())
        queries = [int(f.readline().strip()) for _ in range(k)]
        print(f"Read {n} nodes, {m} edges, and {k} queries")
    return (n, m, k), edges, queries


def answer_reader(path: Path) -> list[int]:
    """
    Read the answers from the file
    """
    with open(path, "r", encoding="utf-8") as f:
        return [int(line.strip()) for line in f.readlines()]


def reader() -> list[
    tuple[tuple[tuple[int, int, int], list[list[int]], list[int]], list[int]]
]:
    """
    Read the input and answer files
    """
    result = []
    for i in range(1,2):
    # for i in range(3,4):
        input_path = DATA_PATH / f"{i}.in"
        answer_path = DATA_PATH / f"{i}.out"
        data = input_reader(input_path)
        answers = answer_reader(answer_path)
        result.append((data, answers))
    return result


def generate(
    data: list[
        tuple[tuple[tuple[int, int, int], list[list[int]], list[int]], list[int]]
    ],
) -> str:
    """
    Generate the data for the benchmark
    """
    input = []
    result = []
    for ((n, m, k), edges, queries), answers in data:
        length = f"({n}, {m}, {k})"
        edges.insert(0, [0,0])
        queries.insert(0, 0)
        edge_str = ", ".join(f"({u}, {v})" for u, v in edges)
        query_str = ", ".join(str(q) for q in queries)
        input.append(f"({length}, [{edge_str}], [{query_str}])")
        answer_str = ", ".join(str(a) for a in answers)
        result.append(f"[{answer_str}]")
        break
    output = {"data": ",".join(input), "answers": ",".join(result)}
    return TEMPLATE.format(**output)


def main():
    data = reader()
    output = generate(data)
    output_path = "benchmark.mbt"
    with open(output_path, "w", encoding="utf-8") as f:
        f.write(output)


if __name__ == "__main__":
    main()
